You can create function pointers in C to allow you to pass functions
as parameters.

See example1.c for a lesson on how to correctly pass an array's size to 
a function and pitfalls for doing it incorrectly.

example of function pointer:





int go_to_warp_speed(int speed)
{

}

int (*warp_fn)(int);
warp_fn = go_to_warp_speed; --This will create a variable that can store the address
of the go_to_warp_speed() function

warp_fn(4) --This is just like calling go_to_warp_speed(4)

You need to tell C the return type and parameters that are taken when you 
make these pointers


so the syntax is ReturnType (*NameOfPointerVariable)(ParaType1, ParamType2)

--In windows at least, stricmp compares two strings for case sensitivity

--See example1.c for how to define a function parameter to take a function


C has a sort function called qsort(). Qsort uses function pointers to help
decide what to sort by.

qsort(void *array, --array pointer
      size_t length, -- the length of the array
      size_t item_size, - the size of each element in the array
      int (*compar)(const void *, const void *));
      --*compar is a pointer to a function that compares two items in the 
      array

--see qsort_example.c for more info and usage cases


/*

      Function vs Macro

      A macro is used to rewrite code before its compiled. In this chapter va_start
      etc... are macros. These contain instructions that the preprocessor uses to generate
      code inside your program.

      So macros get replaced with other code by C. Preprocessor runs just before
      compilation.

*/